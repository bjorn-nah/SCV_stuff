require 'scv'
location(0x8000, 0x8FFF)
section{"rom", org=0x8000}
    dc.b 'H'	
@main
    di
	lxi sp,0xFFD2		-- initialize Stack pointer
    ei
    calt 0x8C			-- clear text area
	
	lxi hl,vdc_data		-- load VDC data
    lxi de,0x3400
    mvi c,0x03 
    block
	

-- initialize variables
	mvi a,0x00
	mov (0xFF90), a
	mov (0xFF91), a
	
@loop_1

	mov a,(0xFF91)
	eqi a,0x00
	jmp nochange
	
	--call CLRSCRN
	calt 0x8C			-- clear text area
	
	mov a,(0xFF90)
	eqi a,0x00
	jmp noTxtCll
	call SCRTXT
@noTxtCll

	mov a,(0xFF90)
	eqi a,0x01
	jmp noGrxCll
	call SCRSGPH
@noGrxCll

	mov a,(0xFF90)
	eqi a,0x02
	jmp noImgCll
	call SCRIMGGPH
@noImgCll
	
@nochange
	
	--increment method
	mov a,(0xFF91)
	mvi e,0x01
	add a,e
	mov (0xFF91),a
	
	mov d,a
	
	eqi d,0x00
	jmp dontadd
	clc
	mov a,(0xFF90)
	mvi e,0x01
	adc a,e
	mov (0xFF90),a
	clc
@dontadd
	
	mov a,(0xFF90)
	eqi a,0x03		-- max screens+1
	jmp dontrst
	mvi a,0x00
	mov (0xFF90),a
@dontrst
	
	call WVBLANK
	jmp loop_1

section{"WVBLANK", org=0x8200}
	skit f2            -- wait until acknowledged
	jr  WVBLANK
	ret
	
section{"CLRSCRN", org=0x8300}
	mvi a,0x00
	mvi b,0x30
	mvi c,0x00
@clrLoop1
	stax (bc)
	inr c
	eqi c,0x00
	jmp clrLoop1
	
	mvi b,0x31
	mvi c,0x00
@clrLoop2
	stax (bc)
	inr c
	eqi c,0x00
	jmp clrLoop2
	
	ret
	
section{"SCRTXT", org=0x8400}
	lxi hl,vdc_data		-- load VDC data
    lxi de,0x3400
    mvi c,0x03 
    block
	
	mvi c,0x44
	--mvi c,0x00
	mvi b,0x00
	mvi a,0x00
	mvi d,0x30
@loadChr
	mov (0xFF9F),c
	mov e,(0xFF9F)
	stax (de)
	inr b
	inr c
	inr a
	eqi b,0x16
	jmp noLine
	mvi b,0x00
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c

@noLine
	
	eqi a,0x80	-- after 0x80, the charset seem to loop
	jmp loadChr
	ret
	
section{"SCRSGPH", org=0x8500}
	lxi hl,vdc_sgrph	-- load VDC data
    lxi de,0x3400
    mvi c,0x03 
    block

	mvi c,0x44
	mvi b,0x00
	mvi a,0x00
	mvi d,0x30
@loadChr1
	mov (0xFF9F),c
	mov e,(0xFF9F)
	stax (de)
	inr b
	inr c
	inr a
	eqi b,0x16
	jmp noLine1
	mvi b,0x00
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c

@noLine1
	
	eqi a,0x80	-- after 0x80, the charset seem to loop
	jmp loadChr1
	
	mvi c,0x04
	--mvi c,0x00
	mvi b,0x00
	mvi a,0x80
	mvi d,0x31
@loadChr2
	mov (0xFF9F),c
	mov e,(0xFF9F)
	stax (de)
	inr b
	inr c
	inr a
	eqi b,0x16
	jmp noLine2
	mvi b,0x00
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c
	inr c

@noLine2
	
	eqi a,0x00	-- after 0x80, the charset seem to loop
	jmp loadChr2

	ret
	
section{"SCRIMGGPH", org=0x8600}
	lxi hl,vdc_bgimg	-- load VDC data
    lxi de,0x3400
    mvi c,0x03 
    block
	
	lxi hl,bg_data
    lxi de,0x3020
    mvi c,0xFF
    block
	
	lxi hl,0x8B00
    lxi de,0x3120
    mvi c,0xFF
    block
	
	ret
	
section{"vdc_data", org=0x8F00}
	dc.b 0xD0,0x00,0x00,0xF8
	
section{"vdc_sgrph", org=0x8F10}
	dc.b 0x91,0x08,0xFF,0xF8
	
section{"vdc_bgimg", org=0x8F20}
	dc.b 0x91,0x0F,0xFF,0x0F
	
--section{"bg_data", org=0x8A00}
--	dc.b 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF

section{"bg_data", org=0x8A00}
	dc.b 0xFF, 0xFB, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0x0F, 0x0F, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFC, 0xF0, 0xC0, 0xC0, 0xC0, 0xD0, 0xB4, 0x2F, 0x0F, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xF5, 0xFF, 0xBF, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xFF, 0xFF, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE, 0xEF, 0x23, 0x00, 0x00, 0x00, 0x00, 0x01, 0xDF, 0xEA, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x5F, 0xE0, 0x54, 0xFC, 0xFF, 0x9F, 0xFF, 0xD8, 0xF0, 0x20, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0xEE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x42, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0x80, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x15, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x3F, 0x0F, 0x03, 0x07, 0x0F, 0x7F, 0x9E, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAA, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0x08, 0x00, 0x00, 0x7E, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAA, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x17, 0x7F 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0xA0, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA8, 0x00, 0x00, 0x90, 0x5C, 0xFC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
	dc.b 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xFF, 0xFF, 0xFE, 0xFC, 0xFC, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	dc.b 0xE5, 0x0A, 0x00, 0x01, 0x7F, 0x28, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 

	
writebin(filename .. '.bin')